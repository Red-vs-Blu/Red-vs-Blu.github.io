{"version":3,"sources":["../node_modules/truffle-contract/node_modules/web3-eth-accounts/src sync","../node_modules/truffle-interface-adapter/node_modules/web3-eth-accounts/src sync","contract/loadWeb3.js","App.js","registerServiceWorker.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","LoadWeb3","Promise","reject","web3","window","console","log","provider","Web3","providers","HttpProvider","App","props","resolve_promise","f","args","err","result","instantiateContract","a","contract","require","RVB","RedVsBlueABI","setProvider","currentProvider","deployed","then","instance","subscribeToEvents","refreshRound","updateCreditBalance","NewVoteCast","on","event","getFirstAccount","eth","getAccounts","accounts","length","alert","getBlocksLeftInRound","getBlockNumber","bn","parseInt","state","BLOCK_DIV","getRoundFromETH","updateRoundTotals","app_account","GetGameTotals","round_id","from","setState","red_total","Number","fromWei","blue_total","updatePercentages","updateRewardsForRound","latest_round","blocks_left","ongoing_round_id","is_active","current_block","prevRound","nextRound","latestRound","buyCredits","BuyCredits","value","toWei","tx_amount","tx","withdrawCredits","WithdrawCredits","GetEarnings","winnings","bet_amount","claimed","round_rewards","round_bets","round_claimable","GetCreditBalance","balance","credits","credit_balance","claimRewards","ClaimEarnings","castVote","is_blue","CastVote","txAmountChanged","bind","voteRed","voteBlue","red_percent","blue_percent","results","catch","v","sum","s","this","getPercentage","slice","target","className","style","width","onClick","marginRight","getPercentageStr","href","type","onChange","Component","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.ee3e670f.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 458;","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 555;","// Contract details + web3 loading.\nimport Web3 from \"web3\";\n\n// Promise that loads or injects a web3 instance.\nlet LoadWeb3 = new Promise(function(resolve, reject) {\n\tvar web3 = window.web3;\n\tif (typeof web3 !== \"undefined\") {\n\t\tconsole.log(\"Detected pre-injected Web3\");\n\t\tresolve({ web3: web3 });\n\t} else {\n\t\tvar provider = new Web3.providers.HttpProvider(\"http://127.0.0.1:7545\");\n\t\tconsole.log(\"No Web3 instance found, using local http provider\");\n\t\tresolve({ web3: new Web3(provider) });\n\t}\n});\n\nexport default LoadWeb3;\n","/*\n *  Entry-point for the RedVsBlue application.\n */\n\n// React and associated components.\nimport React, { Component } from \"react\";\n\n// Ethereum contract ABI and Web3 loader.\nimport LoadWeb3  from \"./contract/loadWeb3\";\nimport RedVsBlueABI from \"./contract/RedVsBlueABI.json\";\n\nimport \"./App.css\";\n\n////////////////////////////////////////////////////////////////////////////////\n\nclass App extends Component {\n    // App constructor - sets up default state.\n    constructor(props) {\n        super(props);\n\n        /*\n         *  Input element `tx_amount` is the amount to buy / withdraw / vote.\n         *  This handler just makes sure that the state copy is updated.\n         */\n        this.txAmountChanged = this.txAmountChanged.bind(this);\n\n        /*\n         *  Vault functions - buy and withdraw credits. Fairly simple stuff.\n         */\n        this.claimRewards = this.claimRewards.bind(this);\n        this.buyCredits = this.buyCredits.bind(this);\n        this.withdrawCredits = this.withdrawCredits.bind(this);\n\n        /*\n         *  Refresh a round based on the round the user wants to see. This is\n         *  largely where we draw all the UI elements on major changes to the\n         *  game state (round changed, new round started).\n         */\n        this.refreshRound = this.refreshRound.bind(this);\n\n        /*\n         *  Voting functions. Only valid for the active round as determined by\n         *  the block number.\n         */\n        this.voteRed = this.voteRed.bind(this);\n        this.voteBlue = this.voteBlue.bind(this);\n\n        /*\n         *  Round related management - advance to current or view old games and\n         *  payouts. Only the `round_id` is advanced or changed due to this.\n         *  As such, a call to refresh_round is required to update the relevant\n         *  game totals.\n         */\n        this.prevRound = this.prevRound.bind(this);\n        this.nextRound = this.nextRound.bind(this);\n\n        this.updateRewardsForRound = this.updateRewardsForRound.bind(this);\n        this.updateCreditBalance = this.updateCreditBalance.bind(this);\n\n        this.web3     = null;\n        this.contract = null;\n\n        this.state = {\n            /*\n             *  Constants.\n             */\n            BLOCK_DIV: 128,\n\n            /*\n             *  Active is set enabled if the current game being viewed is the\n             *  current round.\n             */\n            is_active: false,\n\n            /*\n             *  Game related statistics - game id, and totals to render.\n             */\n            round_id: -1,\n            current_block: -1,\n            ongoing_round_id: -1,\n            red_total: Number(-1),\n            blue_total: Number(-1),\n            round_rewards: Number(0),\n            round_bets: Number(0),\n            round_claimable: false,\n\n            /*\n             *  Input field for vote value, deposit, and withdrawal amount.\n             */\n            tx_amount: 100,\n\n            /*\n             *  Local rendering related state variables.\n             */\n            red_percent: 50.0,\n            blue_percent: 50.0,\n\n            /*\n             * Vault - mirror of balance etc and effective positive $$.\n             */\n            credit_balance: 0,\n        };\n    }\n\n    // mounted ::\n    componentDidMount() {\n        LoadWeb3.then(results => {\n            this.web3 = results.web3;\n            this.instantiateContract();\n        }).catch(() => {\n            console.log(\"Unable to load Web3\");\n        });\n    }\n\n    ////////////////////////////////////////////////////////////////////////////\n    // Helpers.\n    ////////////////////////////////////////////////////////////////////////////\n\n    resolve_promise = (f, args=[]) => {\n        return new Promise((resolve, reject) => {\n            f(...args, (err, result) => {\n                if (err !== null) reject(err);\n                else resolve(result);\n            });\n        });\n    }\n\n    getPercentage(v, sum) {\n        if (sum === 0) return 50;\n        if (v === sum) return 100;\n        if (v === 0) return 0;\n        return (100.0 * v) / sum;\n    }\n\n    getPercentageStr(v, sum) {\n        let s = (\"\" + this.getPercentage(v, sum));\n        if (s.length > 5) {\n            s = s.slice(0, 5)\n        }\n        return s;\n    }\n\n    ////////////////////////////////////////////////////////////////////////////\n    //  Contract basics.\n    ////////////////////////////////////////////////////////////////////////////\n\n    instantiateContract = async () => {\n        const contract = require(\"truffle-contract\");\n        const RVB = contract(RedVsBlueABI);\n        RVB.setProvider(this.web3.currentProvider);\n        RVB.deployed().then(async (instance) => {\n            this.contract = instance;\n            this.subscribeToEvents();\n            await this.refreshRound();\n            await this.updateCreditBalance();\n        });\n    }\n\n    subscribeToEvents = async () => {\n        this.contract.NewVoteCast().on(\"data\", event => {\n            this.refreshRound();\n        });\n\n    }\n\n    ////////////////////////////////////////////////////////////////////////////\n    //  Accounts and other web3.eth stuff.\n    ////////////////////////////////////////////////////////////////////////////\n\n    getFirstAccount = async () => {\n        const accounts = await this.resolve_promise(this.web3.eth.getAccounts);\n        if (accounts.length === 0) {\n            alert(\"At-least one account must exist!\");\n            return;\n        }\n        return accounts[0];\n    }\n\n    getBlocksLeftInRound = async () => {\n        const bn = await this.resolve_promise(this.web3.eth.getBlockNumber);\n        return parseInt(bn % this.state.BLOCK_DIV);\n    }\n\n    getRoundFromETH = async () => {\n        const bn = await this.resolve_promise(this.web3.eth.getBlockNumber);\n        return parseInt(bn / this.state.BLOCK_DIV);\n    }\n\n    ////////////////////////////////////////////////////////////////////////////\n    //  Round updates for totals, percentages UI etc as well as refresh logic.\n    ////////////////////////////////////////////////////////////////////////////\n\n    updatePercentages() {\n        const sum = this.state.red_total + this.state.blue_total;\n        this.setState({\n            red_percent: this.getPercentage(this.state.red_total, sum),\n            blue_percent: this.getPercentage(this.state.blue_total, sum),\n        });\n    }\n\n    updateRoundTotals = async () => {\n        const app_account = await this.getFirstAccount();\n        this.contract.GetGameTotals(this.state.round_id, {\n            from: app_account,\n        }).then((result, err) => {\n            this.setState({\n                red_total: Number(this.web3.fromWei(result[0], 'milli')),\n                blue_total: Number(this.web3.fromWei(result[1], 'milli')),\n            }, this.updatePercentages);\n        });\n\n        this.updateRewardsForRound();\n    }\n\n    refreshRound = async () => {\n        const latest_round = await this.getRoundFromETH();\n        const blocks_left  = await this.getBlocksLeftInRound();\n\n        /*\n         *  First time we are being called - set the current and latest round\n         *  to the same value.\n         */\n        if (this.state.round_id === -1) {\n            this.setState({\n                round_id: latest_round,\n                ongoing_round_id: latest_round,\n                is_active: true,\n                current_block: blocks_left,\n            }, this.updateRoundTotals);\n        }\n\n        /*\n         *  Subsequent call, only update the latest round and not the round that\n         *  the viewer is potentially seeing.\n         */\n        else {\n            this.setState({\n                ongoing_round_id: latest_round,\n                is_active: (this.state.round_id === latest_round),\n                current_block: blocks_left,\n            }, this.updateRoundTotals);\n        }\n    }\n\n    prevRound = async () => {\n        if (this.state.round_id > 0) {\n            this.setState({\n                round_id: this.state.round_id - 1,\n                is_active: false,\n            }, this.refreshRound);\n        }\n    }\n\n    nextRound = async () => {\n        if (this.state.round_id < this.state.ongoing_round_id) {\n            const is_active = (this.state.ongoing_round_id === this.state.round_id + 1);\n            this.setState({\n                round_id: this.state.round_id + 1,\n                is_active: is_active,\n            }, this.refreshRound);\n        }\n    }\n\n    latestRound = async () => {\n        const latest_round = await this.getRoundFromETH();\n        this.setState({\n            round_id: latest_round,\n            ongoing_round_id: latest_round,\n            is_active: true,\n        }, this.refreshRound);\n    }\n\n    ////////////////////////////////////////////////////////////////////////////\n    // Contract Vault functions.\n    ////////////////////////////////////////////////////////////////////////////\n\n    buyCredits = async () => {\n        const app_account = await this.getFirstAccount();\n        this.contract.BuyCredits({\n            from: app_account,\n            value: this.web3.toWei(this.state.tx_amount, 'milli'),\n        }).then((tx, err) => {\n            if (err) {\n                alert(\"Error buying credits -- try again!\");\n                return;\n            }\n            this.updateCreditBalance();\n        });\n    }\n\n    withdrawCredits = async () => {\n        const app_account = await this.getFirstAccount();\n        this.contract.WithdrawCredits(\n            this.web3.toWei(this.state.tx_amount, 'milli'),\n            {\n                from: app_account,\n            }\n        ).then((tx, err) => {\n            if (err) {\n                alert(\"Error buying credits -- try again!\");\n                return;\n            }\n            this.updateCreditBalance();\n        });\n    }\n\n    updateRewardsForRound = async () => {\n        const app_account = await this.getFirstAccount();\n        this.contract.GetEarnings(this.state.round_id, {\n            from: app_account,\n        }).then((result) => {\n            const winnings = this.web3.fromWei(result[0], 'milli');\n            const bet_amount = this.web3.fromWei(result[1], 'milli');\n            const claimed = result[2];\n            this.setState({\n                round_rewards: winnings,\n                round_bets: bet_amount,\n                round_claimable: !claimed,\n            });\n        });\n    }\n\n    updateCreditBalance = async () => {\n        const app_account = await this.getFirstAccount();\n        this.contract.GetCreditBalance({\n            from: app_account,\n        }).then((balance) => {\n            const credits = Number(this.web3.fromWei(balance, 'milli'));\n            this.setState({credit_balance: credits});\n        });\n    }\n\n    claimRewards = async () => {\n        const app_account = await this.getFirstAccount();\n        this.contract.ClaimEarnings(this.state.round_id, {\n            from: app_account,\n        }).then((result) => {\n            this.updateCreditBalance();\n            this.updateRewardsForRound();\n        });\n    }\n\n    ////////////////////////////////////////////////////////////////////////////\n\n    castVote = async (is_blue) => {\n        const app_account = await this.getFirstAccount();\n        this.contract.CastVote(\n            this.web3.toWei(this.state.tx_amount, 'milli'),\n            is_blue,\n            {\n                from: app_account,\n            }\n        ).then((tx, err) => {\n            if (err) {\n                alert(\"Error casting vote -- try again!\");\n                return;\n            }\n            this.updateCreditBalance();\n        });\n    }\n\n    ////////////////////////////////////////////////////////////////////////////\n    // User Interaction.\n    ////////////////////////////////////////////////////////////////////////////\n\n    voteRed() { this.castVote(0); }\n    voteBlue() { this.castVote(1); }\n    txAmountChanged(event) { this.setState({tx_amount: event.target.value}); }\n\n    render() {\n        return (\n          <div className=\"App\">\n            <div className=\"App-bg\">\n                <div className=\"App-header\">\n                    <div className=\"App-header-red\" style={{width: \"50%\"}} onClick={this.voteRed}>\n                        <div style={{marginRight: \"10px\"}}>RED:</div>\n                        <div>{this.getPercentageStr(this.state.red_total, this.state.red_total + this.state.blue_total)}%</div>\n                    </div>\n                    <div className=\"App-header-blue\" style={{width: \"50%\"}} onClick={this.voteBlue}>\n                        <div style={{marginRight: \"10px\"}}>BLUE:</div>\n                        <div>{this.getPercentageStr(this.state.blue_total, this.state.red_total + this.state.blue_total)}%</div>\n                    </div>\n                </div>\n                <div className=\"App-header\">\n                    <div className=\"App-header-red\" style={{width: \"50%\"}} onClick={this.voteRed}>\n                        <div>{this.state.red_total}</div>\n                    </div>\n                    <div className=\"App-header-blue\" style={{width: \"50%\"}} onClick={this.voteBlue}>\n                        <div>{this.state.blue_total}</div>\n                    </div>\n                </div>\n                <div className=\"App-split\">\n                    <div className=\"App-red\" style={{width: this.getPercentage(this.state.red_total, this.state.red_total + this.state.blue_total)+\"%\"}}>\n                        {!this.state.is_active && this.state.red_total > this.state.blue_total && <span>WINNER</span>}\n                        {this.state.is_active && this.state.red_total > this.state.blue_total && <span>WINNING</span>}\n                        {!this.state.is_active && this.state.blue_total > this.state.red_total && <span>LOSER</span>}\n                        {this.state.is_active && this.state.blue_total > this.state.red_total && <span>LOSING</span>}\n                        {!this.state.is_active && this.state.blue_total === this.state.red_total && <span>TIED</span>}\n                        {this.state.is_active && this.state.blue_total === this.state.red_total && <span>TIE</span>}\n                    </div>\n                    <div className=\"App-blue\" style={{width: this.getPercentage(this.state.blue_total, this.state.red_total + this.state.blue_total)+\"%\"}}>\n                        {!this.state.is_active && this.state.red_total > this.state.blue_total && <span>LOSER</span>}\n                        {this.state.is_active && this.state.red_total > this.state.blue_total && <span>LOSING</span>}\n                        {!this.state.is_active && this.state.blue_total > this.state.red_total && <span>WINNER</span>}\n                        {this.state.is_active && this.state.blue_total > this.state.red_total && <span>WINNING</span>}\n                        {!this.state.is_active && this.state.blue_total === this.state.red_total && <span>TIED</span>}\n                        {this.state.is_active && this.state.blue_total === this.state.red_total && <span>TIE</span>}\n                    </div>\n                </div>\n            </div>\n            <div className=\"App-body\">\n                <div>\n                    <h4>\n                        <div>A game of tug-of-war for degens.</div>\n                        <div>\n                            <span>Round: </span>\n                            {this.state.round_id > 0 && <button className=\"link-button\" onClick={this.prevRound}>&lt;</button>}\n                            {this.state.round_id}{this.state.is_active && <span> [ongoing] </span>}\n                            {!this.state.is_active && <button className=\"link-button\" onClick={this.nextRound}>&gt;</button>}\n                            {!this.state.is_active && <span className=\"App-latest-btn\" onClick={this.latestRound}> latest</span>}\n                        </div>\n                    </h4>\n                    <p>* No token b/s, 1 ETH == 1000 credits</p>\n                    <p>* New round every {this.state.BLOCK_DIV} blocks [{this.state.BLOCK_DIV - this.state.current_block} blocks left]</p>\n                    <p>* Losing color pays winning color</p>\n                    <p>* No fees, contract <a href=\"https://github.com/Red-vs-Blu/RedVsBlue/blob/master/contracts/RedVsBlue.sol\">here</a></p>\n                    {!this.state.is_active &&\n                        <p>* Result: {this.state.round_rewards}\n                            {this.state.round_rewards >= this.state.round_bets && <span className=\"profit\"> (+{this.state.round_rewards - this.state.round_bets})</span>}\n                            {this.state.round_rewards < this.state.round_bets && <span className=\"loss\"> ({this.state.round_rewards - this.state.round_bets})</span>}\n                            {this.state.round_claimable && this.state.round_rewards > 0 && <button type=\"button\" className=\"link-button\" onClick={this.claimRewards}>claim</button>}\n                            {!this.state.round_claimable && this.state.round_rewards > 0 && <span> [claimed] </span>}\n                        </p>\n                    }\n                    {this.state.is_active &&\n                        <p>* Ongoing round,\n                            <span className=\"color-red\"> {this.state.red_total} </span>\n                            vs\n                            <span className=\"color-blue\"> {this.state.blue_total} </span>\n                        </p>\n                    }\n                </div>\n                <br></br>\n                <div>\n                    <h4>You have {this.state.credit_balance} credits!</h4>\n                    <div className=\"App-input\">\n                        {this.state.is_active && <div className=\"App-red\" onClick={this.voteRed}>Vote Red</div>}\n                        <input type=\"number\" value={this.state.tx_amount} onChange={this.txAmountChanged} />\n                        {this.state.is_active && <div className=\"App-blue\" onClick={this.voteBlue}>Vote Blue</div>}\n                    </div>\n                    <div className=\"App-toolbar\">\n                        <button type=\"button\" className=\"link-button\" onClick={this.buyCredits}>+ Deposit</button>\n                        <button type=\"button\" className=\"link-button\" onClick={this.withdrawCredits}>- Withdraw</button>\n                    </div>\n                </div>\n                <br></br>\n            </div>\n          </div>\n        );\n    }\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nexport default App;\n\n////////////////////////////////////////////////////////////////////////////////\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nregisterServiceWorker();\n"],"sourceRoot":""}